---
title: let expression
names: ["let"]
---

h2. let


Behaves like a sequence, but the children have their own variable
scope.

<pre class="brush: ruby">
  pdef = Ruote.process_definition do
    set 'v:var' => 'val'
    echo "out:${v:var}"
    let do
      set 'v:var' => 'val1'
      echo "in:${v:var}"
    end
    echo "out:${v:var}"
  end
</pre>

# => out:val, in:val1, out:val


h3. as a 'case' statement

<pre class="brush: ruby">
  let do
    define 'published' do
      do_this
    end
    define 'reviewed' do
      do_that
    end
    subprocess '${case}'
  end
</pre>

Subprocesses 'published' and 'reviewed' are bound in a local scope,
that gets discarded when the let exits.

