---
title: cursor expression
filter:
  - erb
  - textile
---

h2. cursor


This class implements the 'cursor' and the 'repeat' (loop) expressions.

The cursor expression is a kind of enhanced 'sequence'. Like a sequence
it will execute its child expression one by one, sequentially. Unlike a
sequence though, it will obey 'commands'.

<pre class="brush: ruby">
  cursor do
    author
    reviewer
    rewind :if => '${f:not_ok}'
    publisher
  end
</pre>

In this simplistic example, the process will flow from author to reviewer
and back until the reviewer sets the workitem field 'not_ok' to something
else than the value 'true'.

There are two ways to pass commands to a cursor either directly from
the process definition with a cursor command expression, either via
the workitem '__command__' [special] field.

h3. cursor commands

The commands that a cursor understands are listed here. The most powerful
ones are 'rewind' and 'jump'.

h4. rewind

Rewinds the cursor up to its first child expression.

<pre class="brush: ruby">
  cursor do
    author
    reviewer
    rewind :if => '${f:not_ok}'
    publisher
  end
</pre>

h4. stop, over & break

Exits the cursor.

<pre class="brush: ruby">
  cursor do
    author
    reviewer
    rewind :if => '${f:review} == fix'
    stop :if => '${f:review} == abort'
    publisher
  end
</pre>

'_break' or 'over' can be used instead of 'stop'.

h4. skip & back

Those two commands jump forth and back respectively. By default, they
skip 1 child, but they accept a numeric parameter holding the number
of children to skip.

<pre class="brush: ruby">
  cursor do
    author
    reviewer
    rewind :if => '${f:review} == fix'
    skip 2 :if => '${f:review} == publish'
    reviewer2
    rewind :if => '${f:review} == fix'
    publisher
  end
</pre>

h4. jump

Jump is probably the most powerful of the cursor commands. It allows to
jump to a specified expression that is a direct child of the cursor.

<pre class="brush: ruby">
  cursor do
    author
    reviewer
    jump :to => 'author', :if => '${f:review} == fix'
    jump :to => 'publisher', :if => '${f:review} == publish'
    reviewer2
    jump :to => 'author', :if => '${f:review} == fix'
    publisher
  end
</pre>

Note that the :to accepts the name of an expression or the value of
its :ref attribute or the value of its :tag attribute.

<pre class="brush: ruby">
  cursor do
    participant :ref => 'author'
    participant :ref => 'reviewer'
    jump :to => 'author', :if => '${f:review} == fix'
    participant :ref => 'publisher'
  end
</pre>

h3. cursor command with :ref

It's OK to tag a cursor/repeat/loop with the :tag attribute and then
point a command to it via :ref :

<pre class="brush: ruby">
  concurrence do

    cursor :tag => 'main' do
      author
      editor
      publisher
    end

    # meanwhile ...

    sequence do
      sponsor
      rewind :ref => 'main', :if => '${f:stop}'
    end
  end
</pre>

This :ref technique may also be used with nested cursor/loop/iterator
constructs :

<pre class="brush: ruby">
  cursor :tag => 'main' do
    cursor do
      author
      editor
      rewind :if => '${f:not_ok}'
      _break :ref => 'main', :if => '${f:abort_everything}'
    end
    head_of_edition
    rewind :if => '${f:not_ok}'
    publisher
  end
</pre>

this example features two nested cursors. There is a "_break" in the inner
cursor, but it will break the main 'cursor' (and thus break the whole
review process).

h3. cursor command in the workitem

The command expressions are merely setting the workitem field '__command__'
with an array value [ {command}, {arg} ].

For example,

<pre class="brush: ruby">
  jump :to => 'author'
    # is equivalent to
  set 'field:__command__' => 'author'
</pre>

It is entirely OK to have a participant implementation that sets __command__
by itself.

<pre class="brush: ruby">
  class Reviewer
    include Ruote::LocalParticipant

    def consume (workitem)
      # somehow review the book
      if review == 'bad'
        #workitem.fields['__command__'] = [ 'rewind' ] # old style
        workitem.command = 'rewind' # new style
      else
        # let it go
      end
      reply_to_engine(workitem)
    end

    def cancel (fei, flavour)
      # cancel if review is still going on...
    end
  end
</pre>

This example uses the Ruote::Workitem#command= method which can be fed
strings like 'rewind', 'skip 2', 'jump to author' or the equivalent arrays
[ 'rewind' ], [ 'skip', 2 ], [ 'jump', 'author' ].


h3. :break_if / :rewind_if

As an attribute of the cursor/repeat expression, you can set a :break_if.
It tells the cursor (loop) if it has to break.

<pre class="brush: ruby">
  cursor :break_if => '${f:completed}' do
    participant 'alpha'
    participant 'bravo'
    participant 'charly'
  end
</pre>

If alpha or bravo replies and the field 'completed' is set to true, this
cursor will break.

:break_unless is accepted. :over_if and :over_unless are synonyms for
:break_if and :break_unless respectively.

:rewind_if / :rewind_unless behave the same, but the cursor/loop, instead
of breaking, is put back in its first step.


h2. repeat (loop)

A 'cursor' expression exits implicitely as soon as its last child replies
to it.
a 'repeat' expression will apply (again) the first child after the last
child replied. A 'break' cursor command might be necessary to exit the loop
(or a cancel_process, but that exits the whole process instance).

<pre class="brush: ruby">
  sequence do
    repeat do
      author
      reviewer
      _break :if => '${f:review} == ok'
    end
    publisher
  end
<% end %>
