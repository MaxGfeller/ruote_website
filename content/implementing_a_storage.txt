---
title: implementing a storage
---

h2. implementing a storage

Ruote comes with two storages, an in-memory one and a file system based one. There are "other storages available":/configuration.html#storage each with its advantages and disadvantages.

There is also a composite storage for choosing a different storage depending on the object to store (expression, workitem, error, schedules, ...).

Sometimes one has to implement his own storage, this page ought to help (if it doesn't give a shout on the "mailing list":http://groups.google.com/group/openwferu-users).

A storage implementation has to follow a contract : the storage interface.


h3(#history). a bit of history

Storages are at the heart of ruote 2.1.x. Simply look at :

<pre class="brush: ruby">
engine = Ruote::Engine.new(Ruote::Worker.new(ThatStorage.new(info)))
  # or
engine = Ruote::Engine.new(ThatStorage.new(info))
</pre>

Workers and engines need a storage, they communicate via a shared storage.

Ruote has an absolute need for persistence. Processes may outlive the engine runtime. When the engine(s) is/are down, the processes must sleep carefully in the storage, when workers are back, processes MUST resume.

Ruote 2.1.x push for multiple workers (breaking the 1 Ruby runtime limit) brought a need for preventing workers from overriding / trashing each other's work.


h3(#documents). documents

Ruote 2.1.x storage design was strongly influenced by "CouchDB":http://couchdb.apache.org/, especially the concept of documents and their revisions.

Ruote represents all of its data as documents, those documents are "JSON":http://json.org serializable hashes with an "_id", a "type" and a "_rev".

The 'type' is a string like "expressions", "errors", "workitems", "schedules", ...

The '_id' attribute is the document identifier.

h4(#document_types). document types

There are 7+1 types of documents:

|_.type         |_.description|
|expressions    |the atomic pieces of process instance|
|msgs           |'messages' to apply/reply to expressions|
|schedules      |msgs scheduled for later processing|
|errors         |errors that occured during process execution (msgs processing)|
|variables      |engine (global) variables|
|configurations |engine configurations|
|workitems      |"StorageParticipant":part/storage_participant.html workitems|
|_history_      |(if you use "Ruote::StorageHistory":https://github.com/jmettraux/ruote/blob/master/lib/ruote/log/storage_history.rb)|


TODO

h3(#consistency). consistency

Ruote requires some documents to be reserved. If you can not offer exclusive
updates with your storage implementation you are limited to a single
"worker":http://rdoc.info/gems/ruote/Ruote/Worker

See the "configuration page":configuration.html for more information on workers in the context of Ruote


h3(#interface). interface

<pre class="brush: ruby">
#--
# core methods
#++

# store a document
#
# opts:
# ... TODO ...
#
# returns:
# * true if the document has been deleted from the store
# * a document when the rev has changed
# * nil when successfully stored
#
def put(doc, opts={})
end

# get a document by document type and key (_id)
#
def get(type, key)
end

# delete a document
#
# returns:
# * true if already deleted
# * a document if the rev of the given document is not the rev of the current
#   document
# * nil when successfully removed
#
def delete(doc)
end

# get many documents of a certain type
#
# input:
# - When key is not specified, return everything from the store
# - Else, do Array(key) and match the collected document id to the given list
#
# opts:
# [:descending]    Return a list, sorted by _id in descending order
# [:count]         Just return a count
# [:skip]          Skip X results
# [:limit]         Limit the list to a lenght of X
#
# returns:
# * An Integer (when :count was specified)
# * An array of documents
#
def get_many(type, key=nil, opts={})
end

# return a list of ids for the given document type
#
def ids(type)
end

#--
# auxiliary methods
#++

# clean the store
#
def purge!
end

# add a new document type to the store (I guess)
#
def add_type(type)
end

# clean the store for the given document type
#
def purge_type!(type)
end
</pre>

TODO


h3(#models). current implementations as models

Like for example "hash_storage.rb":http://github.com/jmettraux/ruote/blob/ruote2.1/lib/ruote/storage/hash_storage.rb

TODO


h3(#testing). testing

unit, functional, concurrent...

TODO

