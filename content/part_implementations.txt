---
title: participant implementations
---

h2. participant implementations


h3. participants and receivers

* "ruote-amqp":http://github.com/kennethkalmer/ruote-amqp - An AMQP participant/receiver pair and remote process launcher


h3. participants found in ruote

* "block participant":part/block_participant.html - a Ruby block as a ruote participant
* "Ruote::NoOpParticipant":part/no_op_participant.html - a participant that immediately replies to the engine
* "Ruote::NullParticipant":part/null_participant.html - a '/dev/null' participant, never replies to the engine
* "Ruote::SmtpParticipant":part/smtp_participant.html - a base for more elaborate email participants
* "Ruote::EngineParticipant":part/engine_participant.html - a bridge to launch [segments of] processes on other ruote engines
* "Ruote::StorageParticipant":part/storage_participant.html - storing the workitems in the engine storage


h3. other participants

* "RuoteAmqp::Participant":http://github.com/kennethkalmer/ruote-amqp/blob/ruote2.1/lib/ruote-amqp/participant.rb - places workitems in an AMQP queue (there is also an assorted "listener":http://github.com/kennethkalmer/ruote-amqp/blob/ruote2.1/lib/ruote-amqp/workitem_listener.rb)
* "Ruote::Jig::JigParticipant":http://github.com/tosch/ruote-jig - a HTTP client participant
* "Rufus::Decision::Participant":part/decision_participant.html - this participat implementation is located in "rufus-decision":http://github.com/jmettraux/rufus-decision it wraps a "decision table":http://jmettraux.wordpress.com/2009/04/25/rufus-decision-11-ruby-decision-tables/ inside of a ruote participant


h3. see also

* a few words about "participants":participants.html
* "implementing participants":implementing_participants.html

