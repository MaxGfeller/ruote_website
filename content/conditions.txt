---
title: conditions
---

h2. conditions

Conditions can be used with the ":if and :unless":common_attributes.html#if_unless common attributes and with the "if":exp/if.html, "given":exp/given.html, "once":exp/once.html and "equals":exp/equals.html (though this one is rather obsolete).

With the ":if":common_attributes#if_unless common attribute:

<pre class="brush: ruby">
  cursor do
    participant 'customer'
    rewind :if => '${not_enough_info} == true'
    participant 'logistics'
  end
</pre>

With the "given":exp/given.html expression:

<pre class="brush: ruby">
  given do
    that "${location} == paris" do
      subprocess "notify_and_wait_for_pickup"
    end
    that "${state} == ready" do
      subprocess "deliver"
    end
    # else...
    subprocess "do_something_else"
  end
</pre>

As one can see, the conditions are tributary to the "dollar notation":dollar.html.


h3(#what). what gets in the condition

After the string has completed all the dollar substitutions (yes, they can be nested), the resulting string is evaluated as a condition.

Without an operator, something not empty or not equal to the string "false" is considered true.

With an operator (==, >=, >, etc) the comparison is evaluated. Ruote understands the same operators as Ruby plus a few others.

Thus, with

<pre class="brush: ruby">
  bill :if => '${amount} > 0.0'
</pre>

if the workitem field amount contains 5.0, the condition becomes

<pre class="brush: ruby">
  bill :if => '5.0 > 0.0'
</pre>

and this result "5.0 > 0.0" string is then evaluated as a condition. All dollar substitutions are performed before the check for a condition.


h3(#without_operator). without an operator

Without an operator (something like == or <), a condition holds true if the resulting string, when stripped, is not empty (length > 0) and not equal to the string "false".

<pre class="brush: ruby">
  bill :if => '${amount}'
</pre>

The bill participant (or subprocess) will be triggered if the workitem field "amount" when turned to a string result in something non-empty and not equal to the "false" string.


h3(#with_operator). with an operator

<pre class="brush: ruby">
  notify_boss :if => '${amount} == 12.0'
  bill :if => '${amount} != 0.0'
  bill :if => '${amount} > 0.0'
  notify_boss :if => '${customer.name} =~ /^Acme /'
</pre>

etc.


h3(#string_equality). a note about strings

When dealing with strings, try to cut ambiguity. Surround the string with quotes or double-quotes or use the "quoting thing":dollar.html#quotes of the dollar notation.

<pre class="brush: ruby">
bill :if =>
  '${amount} > 0.0 or (${'f:name} =~ /^Acme/ and ${'f:city} == "Orlando"'
</pre>


h3(#and_or). _and_ / _or_ combinations

One case use "and" and "&&", and "or" and "||".

<pre class="brush: ruby">
  notify_boss :if => "${amount} > 500.0 and '${customer.name}' =~ /^Acme"
</pre>

Using parenthesis is OK.

<pre class="brush: ruby">
bill :if =>
  '${amount} > 0.0 or (${'f:name} =~ /^Acme/ and ${'f:city} == "Orlando"'
</pre>


h3(#further). further conditions

TODO (is [not] set, is [not] empty, is [not] null, [not] in Array|Hash)


h3(#ruby). falling back to Ruby

TODO (ruby_eval_allowed)


h3. see also

* "dollar notation":dollar.html
* "process variables and workitem fields":vars_and_fields.html

