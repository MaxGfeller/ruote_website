---
title: persistence
filter:
  - erb
  - textile
---

h2. engine persistence

*Warning* : this piece of documentation is about the persistence scheme found in Ruote 0.9.20 and above.

The persistence as described here is 'persistence of the process instance' aka 'workflow runtime data persistence', it's not the same as worklist/workitem persistence.

At the end of this page, there is an explanation about "pooltool.ru":#pooltool, a script for migration of rundata from one persistence flavour to another.

The persistence mechanism is determined by the engine class selection. For example, the class OpenWFE::Engine, the simplest of the engine classes, stores everything in memory. This is super fast, but is limited to the system of the memory and processes just die when the engine stops.

The most common engine will be OpenWFE::FsPersistedEngine. it stores all the processes in a hierarchy of directories, under work/ by default. The expressions that make up process instances are stored using Ruby Marshalling (or YAML as an option, but this is way slower).


<hr>


h3. in-memory

h4. OpenWFE::Engine

This is the engine used in the "quickstart":quickstart.html, no persistence, the engine, gets shut down, all the processes are forgotten.

It may still be useful in scenarii where a transient engine is necessary (tiny subprocesses, webflow, ...)

<hr>


h3. filesystem based persistence

h4. OpenWFE::FsPersistedEngine

This is the default persistence mechanism for "ruote-rest":http://github.com/jmettraux/ruote-rest and "ruote-web2":http://github.com/jmettraux/ruote-web2

It stores the processes rundata in a hierarchy of directions with files for each expressions at the leaves.


<hr>


h3. relational database backed persistence

h4. ...

blah


<hr>


h3. Tokyo Cabinet / Tyrant based persistence

"Tokyo Cabinet":http://tokyocabinet.sf.net/index.html is a lean DBM system authored by Mikio Hirabayashi. Cabinet is local while Tokyo Tyrant proposes a TCP front end for cabinets.

Ruote uses the "rufus-tokyo":http://github.com/jmettraux/rufus-tokyo ruby gem for accessing Tokyo Cabinet tables or Tokyo Tyrant tables 

Tokyo Cabinet / Tyrant install "instructions":tokyo.html.


h4. OpenWFE::TcPersistedEngine

By default, this engine stores all is rundata (expressions) in a file work/expstorage.tdb

The benchmarks indicate that this persistence mecha performs a bit better than the FileSystem based one.


h4. OpenWFE::TtPersistedEngine

Storage occurs in a remote Tokyo Tyrant table. Such a server may be started with a command like :

<pre>
  ttserver -port 1978 expressions.tct
</pre>

The suffix .tct is very important, it indicates to Tokyo Tyrant that the backend is a table structure.

By default, the TtPersistedEngine points to a Tyrant server supposedly on the localhost and listening on port 1978 (Tokyo Tyrant's default).


<hr>


h3. work/pooltool.ru<a name="pooltool"></a>

Sometimes, it's necessary to move from one persistence mechanism to another. Ruote makes sure to place a tool named "pooltool.ru" under the work/ repository.

There is one important case where you might be forced to use work/pooltool.ru : when the Marshalling mechanism the persistence system uses has changed. This change sometimes occurs between one version of Ruby and another. You'd generally use pooltool.ru with the previous Ruby to read and then write as YAML. And then, from the next Ruby version, to read that YAML and write with the new Marshalling. YAML is way slower than Marshalling persistence, hence it's the recommended persistence flavour.

To get some help about pooltool.ru :

<pre>
  ruby work/pooltool.ru --help
</pre>

To migrate from marshal to yaml :

<pre>
  ruby work/pooltool.ru --yaml work/expool work/expool_copy
</pre>

this will output something like :

<pre>
  source : work/expool
  target : work/expool_copy

  opts : {"-y"=>true}

    . 20090301-gisanubeze 0.0.0 participant  (OpenWFE::ParticipantExpression)
    . 20090301-gisanubeze 0.0 sequence  (OpenWFE::SequenceExpression)
    . 20090301-gisanubeze 0 environment  (OpenWFE::Environment)
    . 20090301-gisanubeze 0 process-definition  (OpenWFE::DefineExpression)
    . 0 0 environment  (OpenWFE::Environment)
    . 20090301-giropikutzu 0.0.0 participant  (OpenWFE::ParticipantExpression)
    . 20090301-giropikutzu 0.0 sequence  (OpenWFE::SequenceExpression)
    . 20090301-giropikutzu 0 environment  (OpenWFE::Environment)
    . 20090301-giropikutzu 0 process-definition  (OpenWFE::DefineExpression)
    . 20090301-gisejusuki 0.0.0 participant  (OpenWFE::ParticipantExpression)
    . 20090301-gisejusuki 0.0 sequence  (OpenWFE::SequenceExpression)
    . 20090301-gisejusuki 0 environment  (OpenWFE::Environment)
    . 20090301-gisejusuki 0 process-definition  (OpenWFE::DefineExpression)
    . 20090301-dibirizase 0.0.0 participant  (OpenWFE::ParticipantExpression)
    . 20090301-dibirizase 0.0 sequence  (OpenWFE::SequenceExpression)
    . 20090301-dibirizase 0 environment  (OpenWFE::Environment)
    . 20090301-dibirizase 0 process-definition  (OpenWFE::DefineExpression)

  migrated 17 expressions.
  migrated 5 processes.
</pre>

Another example, copying from a classical filesystem persistence to a Tokyo Cabinet table :

<pre>
  ruby work/pooltool.ru work/expool work/expool.tct
</pre>

