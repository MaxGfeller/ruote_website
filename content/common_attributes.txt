---
title: common attributes
---

h2. attributes common to all expressions

The attributes listed on this page may be used with any expression.

* ":timeout":#timeout
* ":if or :unless":#if_unless
* ":forget":#forget
* ":on_error":#on_error
* ":on_cancel":#on_cancel
* ":on_timeout":#on_timeout
* ":tag":#tag
* ":filter":#filter

<hr/>

h3(#timeout). :timeout

If after two days, the two reviewers couldn't do their work, the process instance will resume to the editor :

<pre class="brush: ruby">
  sequence do
    participant :ref => 'author'
    sequence :timeout => '2d' do
      participant :ref => 'reviewer1'
      participant :ref => 'reviewer2'
    end
    participant :ref => 'editor'
  end
</pre>

:timeout understands h, m, d, s (respectively hour, minute, day, second). It also understands y, M, w (for year, Month and week), but they are rarely used.

It's OK to give an absolute date to the :timeout attribute :

<pre class="brush: ruby">
  participant :ref => 'author', :timeout => 'Sun Jan 24 17:28:28 +0900 2010'
</pre>

But most of the time absolute dates are fetched from process variables or workitem fields :

<pre class="brush: ruby">
  participant :ref => 'author', :timeout => '${f:time_limit}'
</pre>

Please note that "participants":exp/participant.html may have their say in their timeout.

You might also have a look at the ":on_timeout":#on_timeout attribute.


h3(#if_unless). :if / :unless

These two attributes accept a condition string. If the condition evaluates to true (or false for :unless), the expression will get executed, else not.

The CEO will receive a workitem / task only if the budget (stored in a workitem field) exceeds 23000 :

<pre class="brush: ruby">
  concurrence do
    participant 'ceo', :if => '${f:budget} > 23000'
    participant 'cfo'
    participant '${f:bu_head}'
  end
</pre>

Any expression may use :if / :unless :

<pre class="brush: ruby">
  cursor do
    subprocess 'gather_data'
    subprocess 'generate_graphs'
    participant 'quality_control'
    rewind :unless => '${f:sufficient_data}'
    subprocess 'generate_pdfs'
    # over
  end
</pre>

Really any :

<pre class="brush: ruby">
  sequence do
    sequence :if => '${f:weather} == rainy' do
      rent_tent
      rent_heating_system
    end
    concurrence do
      sequence do
        emit_invitations
        gather_responses :timeout => '3w'
      end
      cursor :if => '${f:orchestra}' do
        gather_orchestra
        decide_about_orchestra
        reserve_orchestra
        rewind :if => '${f:orchestra_already_taken}'
      end
      participant 'mayor', :task => 'notification'
    end
  end
</pre>


h3(#forget). :forget

An expression flagged with :forget => true or :forget => 'true' gets forgotten, it is considered has having replied immediately to its parent expression, though its 'execution' is resuming independently.

<pre class="brush: ruby">
  concurrence do
    participant 'alfred'
    participant 'bob'
    participant 'charly', :forget => true
  end
</pre>

Charly will receive a workitem, but the concurrence will receive a reply immediately, thus, the concurrence (and the rest of the process) will resume as soon as both Alfred and Bob have replied.

It can be used for some kind of rough fire and forget concurrency :

<pre class="brush: ruby">
  sequence do
    participant 'alfred', :forget => true
    participant 'bob', :forget => true
    participant 'charly', :forget => true
  end
</pre>


h3(#on_error). :on_error

By default, any error in a process instance gets logged and the segment of process where it occurred is stalled. It's then possible to replay_at_error() the issue.

What if you want to specify the "on error" behaviour directly in the process definition ?

:on_error is the closest thing to the begin/rescue, try/catch found in regular programming languages.

<pre class="brush: ruby">
Ruote.process_definition :name => 'x' do

  sequence :on_error => 'handle_issue' do
    participant 'alpha'
    cursor do
      # ...
    end
  end

  define 'handle_issue' do
    participant 'supervisor', :msg => 'process ${wfid} has gone ballistic'
  end
end
</pre>

If there is an error (at any level/depth) inside of our sequence, the whole branch of the "sequence" will get cancelled and then replaced by the element indicated in :on_error.

There will be no error registered in the error journal (unless there is an error in the handling participant/subprocess itself).

:on_error must point to a subprocess or a participant, or a command like "redo" or "undo".

When it points to a subprocess, the branch in error gets replaced by an instance that subprocess. When it points to a participant branch gets replaced by a single workitem despatchement to the participant.

If :redo or 'redo' is given, the process branch will get cancelled and retried :

<pre class="brush: ruby">
  sequence :on_error => :redo do
    # ...
  end
</pre>

If :undo or 'undo' is passed, the branch will get cancelled and the flow will resume :

<pre class="brush: ruby">
  sequence do
    participant 'notify_bu', :on_error => :undo
      # we don't care if the notification fails
    participant 'bu_head'
      # business as usual
  end
</pre>

NOTE : there are plans for making the "listen":exp/listen.html expression listen to errors, stay tuned.


h3(#on_cancel). :on_cancel

on_cancel is used to point at a subprocess or a participant that should be invoked / receive a workitem in case a [segment of a] process gets cancelled.

<pre class="brush: ruby">
pdef = Ruote.process_definition :name => 'aircraft carrier' do
  cursor :on_cancel => 'decommission' do
    concurrence do
      participant 'naval team', :task => 'operate ship'
      participant 'air team', :task => 'operate planes'
    end
  end
  define 'decommission' do
    concurrence do
      participant 'naval team', :task => 'decom weapons'
      participant 'air team', :task => 'decom aircrafts'
    end
  end
end
</pre>

In this process, the aircraft is operated. Upon cancelling, the subprocess 'decommission' is triggered, where the teams get different missions.

Note that, unlike :on_error, when an expression inside an :on_cancel enabled expression is cancelled, that will not trigger the :on_cancel. For example, if the 'operate planes' activity is cancelled, that will not trigger 'decommission'. The trigger will occur if the cursor or the whole process instance is cancelled.

(note as well that when a process get killed, its on_cancel attributes will not trigger)


h3(#on_timeout). :on_timeout

On top of this page figures the description of the <a href="#timeout">:timeout</a> attribute. The :on_timeout attribute is a complement. It indicates what to do (participant or subprocess) when the timeout does trigger.

Apart from the name of a subprocess or a participant, :on_timeout can also take the 'redo' or the 'error' value.

The 'redo' value indicates that on timeout, the flagged expression should get cancelled (along with any children it may have) and be re-applied.

The 'error' value forces the process into error upon timeout (whereas the default timeout behaviour is to resume the flow). A process segment in error is blocked and requires an admin interventation (see <a href="process_administration.html">process administration</a>).

<pre class="brush: ruby">
  sequence do
    participant 'author'
    participant 'reviewer', :timeout => '3d', :on_timeout => 'redo'
    participant 'editor'
  end
</pre>

In this example, the reviewer will receive a fresh workitem every 3 days, until he replies by himself to the flow (which will resume to the editor participant).


h3(#tag). :tag

The tag attribute is used to tag a segment of a process.

<pre class="brush: ruby">
Ruote.process_definition do
  sequence do
    sequence :tag => 'phase 1' do
      alice
      bob
    end
    sequence :tag => 'phase 2' do
      charly
      david
    end
  end
end
</pre>

These tags then appear in the process variables :

<pre class="brush: ruby">
p engine.process(wfid).tags.keys
  # => [ "phase 1" ]
</pre>

In this way, :tag can be used to flag large segments of process instances. Eras, phases, chapter, ... Name it how you want.

(ruote 2.1.12 will probably add a tags field to its workitems, that keeps track of the currently seen tags)

The :tag is used as well by the "_redo":exp/redo.html and the "undo":exp/undo.html (cancel) expression.

The "cursor / repeat":exp/cursor.html expressions can be tagged too, when the cursor/loop has to be manipulated from outside (of the cursor/loop).


h3(#filter). :filter

ouch

