---
title: common attributes
---

h2. attributes common to all expressions

The attributes listed on this page may be used with any expression.

* ":timeout":#timeout
* ":if / :unless":#if_unless
* ":forget":#forget
* ":lose":#lose
* ":flank":#flank
* ":on_error":#on_error
* ":on_cancel":#on_cancel
* ":on_timeout":#on_timeout
* ":tag":#tag
* ":filter":#filter
* ":timers":#timers
* ":scope":#scope

<hr/>

h3(#timeout). :timeout

If after two days, the two reviewers couldn't do their work, the process instance will resume to the editor :

<pre class="brush: ruby">
  sequence do
    participant :ref => 'author'
    sequence :timeout => '2d' do
      participant :ref => 'reviewer1'
      participant :ref => 'reviewer2'
    end
    participant :ref => 'editor'
  end
</pre>

:timeout understands h, m, d, s (respectively hour, minute, day, second). It also understands y, M, w (for year, Month and week), but they are rarely used.

It's OK to give an absolute date to the :timeout attribute :

<pre class="brush: ruby">
  participant :ref => 'author', :timeout => 'Sun Jan 24 17:28:28 +0900 2010'
</pre>

But most of the time absolute dates are fetched from process variables or workitem fields :

<pre class="brush: ruby">
  participant :ref => 'author', :timeout => '${f:time_limit}'
</pre>

Please note that "participants":exp/participant.html may have their say in their timeout.

You might also have a look at the ":on_timeout":#on_timeout attribute.


h3(#if_unless). :if / :unless

These two attributes accept a condition string. If the condition evaluates to true (or false for :unless), the expression will get executed, else not.

The CEO will receive a workitem / task only if the budget (stored in a workitem field) exceeds 23000 :

<pre class="brush: ruby">
  concurrence do
    participant 'ceo', :if => '${f:budget} > 23000'
    participant 'cfo'
    participant '${f:bu_head}'
  end
</pre>

Any expression may use :if / :unless :

<pre class="brush: ruby">
  cursor do
    subprocess 'gather_data'
    subprocess 'generate_graphs'
    participant 'quality_control'
    rewind :unless => '${f:sufficient_data}'
    subprocess 'generate_pdfs'
    # over
  end
</pre>

Really any :

<pre class="brush: ruby">
  sequence do
    sequence :if => '${f:weather} == rainy' do
      rent_tent
      rent_heating_system
    end
    concurrence do
      sequence do
        emit_invitations
        gather_responses :timeout => '3w'
      end
      cursor :if => '${f:orchestra}' do
        gather_orchestra
        decide_about_orchestra
        reserve_orchestra
        rewind :if => '${f:orchestra_already_taken}'
      end
      participant 'mayor', :task => 'notification'
    end
  end
</pre>

The :if and :unless conditions understand things like !=, ==, =~, 'is set', 'is empty', &&, ||, ... More information in the "conditions":conditions.html page.


h3(#forget). :forget

This is the attribute equivalent of the "forget":exp/forget.html expression.

An expression flagged with :forget => true or :forget => 'true' gets forgotten, it is considered has having replied immediately to its parent expression, though its 'execution' is resuming independently.

<pre class="brush: ruby">
  concurrence do
    participant 'alfred'
    participant 'bob'
    participant 'charly', :forget => true
  end
</pre>

Charly will receive a workitem, but the concurrence will receive a reply immediately, thus, the concurrence (and the rest of the process) will resume as soon as both Alfred and Bob have replied.

It can be used for some kind of rough fire and forget concurrency :

<pre class="brush: ruby">
  sequence do
    participant 'alfred', :forget => true
    participant 'bob', :forget => true
    participant 'charly', :forget => true
  end
</pre>


h3(#lose). :lose

This is the attribute equivalent of the "lose":exp/lose.html expression.

<pre class="brush: ruby">
  Ruote.process_definition do
    concurrence :count => 1 do
      alfred
      sequence :lose => true do
        wait '2d'
        send_reminder_to_alfred
        wait '2h'
        send_alarm_to_boss
      end
    end
  end
</pre>

":timers":#timers are probably a better way to express that business logic with ruote.


h3(#flank). :flank

(introduced by ruote 2.2.1)

The previous 'lose' example can be rewritten with 'flank' as:

<pre class="brush: ruby">
  Ruote.process_definition do
    sequence do
      sequence :flank => true do
        wait '2d'
        send_reminder_to_alfred
        wait '2h'
        send_alarm_to_boss
      end
      alfred
    end
  end
</pre>

'Flanking' expressions will reply to their parent expression immediately (like :forget) but will still be cancellable (unlike :forget).

Since they are cancellable, they won't outlive their parent expressions. Thus

<pre class="brush: ruby">
  Ruote.process_definition do
    sequence do
      bob :task => 'support work', :flank => true
      alfred :task => 'main effort'
    end
  end
</pre>

the support work of bob will terminate (get cancelled) as soon as alfred is done with his main effort.

Granted, this could previously be done with "concurrence :count => 1" and ":lose => true", but since 'flanks' where introduced with "timers":#timers, the :flank attribute was introduced as well.


<a id="forget_lose_flank"></a>To sum up the difference between *forget*, *lose* and *flank*:

|_.attribute / expression |_.replies to parent    |_.cancellable      |
|normal expression        |as soon as job is done |yes                |
|*forget*                 |immediately            |no (not reachable) |
|*lose*                   |never                  |yes                |
|*flank*                  |immediately            |yes                |


h3(#on_error). :on_error

By default, any error in a process instance gets logged and the segment of process where it occurred is stalled. It's then possible to replay_at_error() the issue.

What if you want to specify the "on error" behaviour directly in the process definition ?

:on_error is the closest thing to the begin/rescue, try/catch found in regular programming languages.

<pre class="brush: ruby">
Ruote.process_definition :name => 'x' do

  sequence :on_error => 'handle_issue' do
    participant 'alpha'
    cursor do
      # ...
    end
  end

  define 'handle_issue' do
    participant 'supervisor', :msg => 'process ${wfid} has gone ballistic'
  end
end
</pre>

If there is an error (at any level/depth) inside of our sequence, the whole branch of the "sequence" will get cancelled and then replaced by the element indicated in :on_error.

There will be no error registered in the error journal (unless there is an error in the handling participant/subprocess itself).

:on_error must point to a subprocess or a participant, or a command like "redo" or "undo".

When it points to a subprocess, the branch in error gets replaced by an instance that subprocess. When it points to a participant branch gets replaced by a single workitem despatchement to the participant.

If :redo or 'redo' is given, the process branch will get cancelled and retried :

<pre class="brush: ruby">
  sequence :on_error => :redo do
    # ...
  end
</pre>

If :undo or 'undo' is passed, the branch will get cancelled and the flow will resume :

<pre class="brush: ruby">
  sequence do
    participant 'notify_bu', :on_error => :undo
      # we don't care if the notification fails
    participant 'bu_head'
      # business as usual
  end
</pre>

'retry' / :retry and 'pass' / :pass are aliases for 'redo' and 'undo' respectively.

<pre class="brush: ruby">
  sequence do
    participant 'notify_bu', :on_error => :pass
      # we don't care if the notification fails
    participant 'bu_head', :on_error => :retry
      # retry until no error
  end
</pre>

The "listen":exp/listen.html expression may also listen to errors (from ruote 2.2.1 on).

If you want to register finer grained error interception, you might be want to have a look at the "on_error":exp/on_error.html expression (from ruote 2.2.1 on).

From ruote 2.2.1 on, the on_error attribute accepts the same command as a cursor (in fact, it's best used with a cursor).

<pre class="brush: ruby">
  cursor :on_error => 'rewind' do
    # the cursor will rewind by itself if there is an error in its steps
    step_one
    step_two
    step_three
  end
</pre>

or

<pre class="brush: ruby">
  cursor :on_error => 'jump to final_step' do
    # the cursor will jump to the final_step in case of error
    # (it'd be better if the final step itself weren't the source of the error)
    step_one
    step_two
    step_three
    final_step
  end
</pre>

All the cursor commands are valid. Read the description of the "cursor":exp/cursor.html expression for more information.


h3(#on_cancel). :on_cancel

on_cancel is used to point at a subprocess or a participant that should be invoked / receive a workitem in case a [segment of a] process gets cancelled.

<pre class="brush: ruby">
pdef = Ruote.process_definition :name => 'aircraft carrier' do
  cursor :on_cancel => 'decommission' do
    concurrence do
      participant 'naval team', :task => 'operate ship'
      participant 'air team', :task => 'operate planes'
    end
  end
  define 'decommission' do
    concurrence do
      participant 'naval team', :task => 'decom weapons'
      participant 'air team', :task => 'decom aircrafts'
    end
  end
end
</pre>

In this process, the aircraft is operated. Upon cancelling, the subprocess 'decommission' is triggered, where the teams get different missions.

Note that, unlike :on_error, when an expression inside an :on_cancel enabled expression is cancelled, that will not trigger the :on_cancel. For example, if the 'operate planes' activity is cancelled, that will not trigger 'decommission'. The trigger will occur if the cursor or the whole process instance is cancelled.

(note as well that when a process get killed, its on_cancel attributes will not trigger)


h3(#on_timeout). :on_timeout

On top of this page figures the description of the <a href="#timeout">:timeout</a> attribute. The :on_timeout attribute is a complement. It indicates what to do (participant or subprocess) when the timeout does trigger.

Apart from the name of a subprocess or a participant, :on_timeout can also take the 'redo' or the 'error' value.

The 'redo' value indicates that on timeout, the flagged expression should get cancelled (along with any children it may have) and be re-applied.

The 'error' value forces the process into error upon timeout (whereas the default timeout behaviour is to resume the flow). A process segment in error is blocked and requires an admin interventation (see <a href="process_administration.html">process administration</a>).

<pre class="brush: ruby">
  sequence do
    participant 'author'
    participant 'reviewer', :timeout => '3d', :on_timeout => 'redo'
    participant 'editor'
  end
</pre>

In this example, the reviewer will receive a fresh workitem every 3 days, until he replies by himself to the flow (which will resume to the editor participant).

From ruote 2.2.1 on, the :on_timeout attribute accepts the same pre-defined handlers as the :on_error attribute, "jump", "rewind", "undo", "pass", ...


h3(#tag). :tag

The tag attribute is used to tag a segment of a process.

<pre class="brush: ruby">
Ruote.process_definition do
  sequence do
    sequence :tag => 'phase 1' do
      alice
      bob
    end
    sequence :tag => 'phase 2' do
      charly
      david
    end
  end
end
</pre>

These tags then appear in the process variables :

<pre class="brush: ruby">
p engine.process(wfid).tags.keys
  # => [ "phase 1" ]
</pre>

In this way, :tag can be used to flag large segments of process instances. Eras, phases, chapter, ... Name it how you want.

(ruote 2.1.12 will probably add a tags field to its workitems, that keeps track of the currently seen tags)

The :tag is used as well by the "_redo":exp/redo.html and the "undo":exp/undo.html (cancel) expression.

The "cursor / repeat":exp/cursor.html expressions can be tagged too, when the cursor/loop has to be manipulated from outside (of the cursor/loop).


h3(#filter). :filter

Ruote 2.2.0 introduces a :filter attribute for expressions.

Most of the documentation for this attribute is found in the doc for the "filter":exp/filter.html expression. Note however, that the filter expression in one way, while the attribute version is two-sided, 'in' and 'out' (reaching the expression, leaving it).

<pre class="brush: ruby">
Ruote.process_definition do

  set 'v:f' => {
    :in => [
      { :fields => '/^private_/', :remove => true }
    ],
    :out => [
      { :fields => '/^private_/', :restore => true },
      { :fields => '/^protected_/', :restore => true },
    ]
  }

  alpha
  sequence :filter => 'f' do
    bravo
    charly
  end
  delta
end
</pre>

In this example, the filter is placed in the variable named 'f'. When the sequence after alpha is entered, the workitem fields whose name starts with "private_" are removed, bravo and charly can't see them.

Once charly is done, the sequence terminates and the private fields are restored (like they were when reaching the bravo-charly sequence. The fields starting with 'protected_' are restored too, potentially overwriting changes made by bravo or charly.

There are different ways to pass filters.

<pre class="brush: ruby">
Ruote.process_definition do

  # directly

  alpha :filter => {
    :in => [
      { :fields => '/^private_/', :remove => true }
    ],
    :out => [
      { :fields => '/^private_/', :restore => true },
      { :fields => '/^protected_/', :restore => true },
    ]
  }

  # via a variable

  alpha :filter => 'f'

  # via two variables

  alpha :filter => { :in => 'f0', :out => 'f1' }

  # as a participant

  alpha :filter => 'p'

  # as two participants

  alpha :filter => { :in => 'p0', :out => 'p1' }
end
</pre>

The format for filters passed directly or via variables as arrays is detailed for the "filter":exp/filter.html expression. The 'restore' filter operation is particulary useful in the case of an 'out' ('reply') filter attribute.

Participants are registered in the engine like any other participant. There consume method is not expected to reply_to_engine(workitem)

<pre class="brush: ruby">
class MyFilterParticipant
  def consume(workitem)
    return if workitem.fields['__filter_direction__'] == 'out'
      # only filter when filter on 'out' ('reply') (vs 'in'/'apply')
    workitem.fields.keys.each do |k|
      workitem.fields.delete(k) if k.match(/^private_/)
    end
  end
end

engine.register_participant 'filter0', MyFilterParticipant

# ...

pdef = Ruote.process_definition do
  alpha :filter => 'filter0'
end
</pre>

The :filter attribute will favour the 'filter' method of the participant, if it has one. This method, unlike consume, will be expected to return the updated field hash (and it doesn't receive the workitem, but the field hash directly).

<pre class="brush: ruby">
class MyFilterParticipant
  def filter(fields, direction)
    return fields if direction == 'out'
    fields.select { |k, v| ! k.match(/^private/) } # ruby 1.9.x !!!
  end
end
</pre>



h3(#timers). :timers

(introduced by ruote 2.2.1)

"alice receives a task, she has 15 days to do it, she'll have to receive a reminder after 5 days and a final reminder after 12 days" can be conveyed as

<pre class="brush: ruby">
Ruote.define do
  # ...
  alice :timers => '5d: reminder, 12d: final_reminder, 15d: timeout'
  # ...
end
</pre>

The pattern is "duration0: x, duration1: y, ..., durationN: z".

The "action" can be a participant name, a subprocess name or one of a set of keywords.

Those keywords are

* timeout : simply times out

<pre class="brush: ruby">
alice :timers => '1h: timeout'
  # is equivalent to
alice :timeout => '1h'
</pre>

* error : after the given time, the expression is forced into an error

<pre class="brush: ruby">
alice :timers => '1h: reminder, 12h: error'
</pre>

What follows the "error" and precedes the end of the string or the next "," (comma) is taken as the 'error message'

<pre class="brush: ruby">
alice :timers => '1h: reminder, 12h: error it went wrong'
</pre>

* undo, pass

To forget alice and pass to bravo after 12 hours:

<pre class="brush: ruby">
sequence do
  alice :timers => '1h: reminder, 12h: undo'
  bravo
end
</pre>

* redo, retry

To force a re-application of an expression after a certain time:

<pre class="brush: ruby">
alice :timers => '12h: redo'
  # which is equivalent to
alice :timeout => '12h', :on_timeout => 'redo'
</pre>

* skip, back, jump, rewind, continue, break, stop, over, reset

Those "commands" are understood as well (warning, they only apply if you are inside of a 'cursor' expression).

After twelve hours and no reply from alice, the flow will jump to participant charly (over participant bravo):

<pre class="brush: ruby">
cursor do
  alice :timers => '12h: jump charly'
  bravo
  charly
end
</pre>

Note that sub-processes and participants that are triggered by :timers are "flanking". When the expression holding the timers ends, they get cancelled (they don't outlive the expression for which they are 'timers').




h3(#scope). :scope

(introduced by ruote 2.2.1)

By default expressions inside of a workflow instance share the same variable scope. By setting the attribute :scope to "true", a new variable scope is forced.

<pre class="brush: ruby">
define 'flow' do
  set 'v:v' => 'alice'
  sequence :scope => true do
    set 'v:v' => 'bob'
    participant '${v:x}' # will deliver to bob
  end
  participant '${v:x}' # will deliver to alice
end
</pre>

(This example can be reproduced by replacing "sequence :scope => true" by "let" which is a special alias of the sequence expression).

