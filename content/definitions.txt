---
title: process definitions
---

h2. process definitions

Process definitions are documents that describe how a [business] process should orchestrate the flow of work among participants.

Participants are registered at start time usually. While process definitions are 'parsed' at their launch time. Each launch of a process definition creates a process instance.

Ruote turns process definitions into an abstract syntax tree (a 'tree' for short) at launch time. It can mainly read three flavours of process definitions : a Ruby DSL, a XML and plain trees (usually as JSON, though YAML could be considered).

A process definition contains 1 main process definition and may contain 1 or more sub-process definitions. For example.

<pre class="brush: ruby">
  Ruote.process_definition :name => 'test'
    sequence do
      subprocess :ref => 'analysis'
      subprocess :ref => 'publication'
    end
    process_definition :name => 'analysis' do
      sequence do
        participant :ref => 'alice'
        participant :ref => 'bob'
      end
    end
    process_definition :name => 'publication' do
      participant :ref => 'charly'
    end
  end
</pre>


h3. XML process definitions

XML may be advantageous for some people as it looks enterprisey. Perhaps a better reason for using it is the fact that libraries for generating XML documents abound, as well as other XML related tools.

<pre class="brush: xml">
  <process-definition name="my_def">
    <sequence>
      <participant ref="alice" />
      <participant ref="bob" />
    </sequence>
  </process-definition>
</pre>

You can use the parser to turn XML into a Ruote tree :

<pre class="brush: ruby">
require 'rubygems'
require 'ruote/parser'

tree = Ruote::Parser.parse(%{
  <process-definition name="my_def">
    <sequence>
      <participant ref="alice" />
      <participant ref="bob" />
    </sequence>
  </process-definition>
})

p tree
  # =>
  # ["process_definition", {"name"=>"my_def"}, [
  #   ["sequence", {}, [
  #     ["participant", {"ref"=>"alice"}, []],
  #     ["participant", {"ref"=>"bob"}, []]]]]]
</pre>

Or directly pass the XML as a String to the engine :

<pre class="brush: ruby">
engine.launch(%{
  <process-definition name="my_def">
    <sequence>
      <participant ref="alice" />
      <participant ref="bob" />
    </sequence>
  </process-definition>
})
</pre>


h3. Ruby process definitions

Some kind of Ruby DSL can be used to define processes :

<pre class="brush: ruby">
  Ruote.process_definition :name => 'my_def' do
    sequence do
      participant :ref => 'alice'
      participant :ref => 'bob'
    end
  end
</pre>


One advantage of this 'notation' is that passing complex data structures from the process definition is possible :

<pre class="brush: ruby">
  Ruote.process_definition :name => 'my_def' do
    sequence do
      set :field => 'items', :value => { 'cars' => 2, 'trucks' => 0 }
      participant :ref => 'alice'
      participant :ref => 'bravo'
    end
  end
</pre>


Not necessarily a good practice but can come in handy, and remember that ruote will flatten that to something that is JSONifiable.


h3. raw [JSON] process definitions

In JSON, they would look like :

<pre class="brush: jscript">
  [ 'process-definition', { 'name': 'my_def' }, [
    [ 'sequence', {}, [
      [ 'participant', { 'ref': 'alice' }, [] ],
      [ 'participant', { 'ref': 'bob' }, [] ] 
    ] ] 
  ] ]
</pre>

In Ruby, that translates to :

<pre class="brush: ruby">
  [ 'process-definition', { 'name' => 'my_def' }, [
    [ 'sequence', {}, [
      [ 'participant', { 'ref' => 'alice' }, [] ],
      [ 'participant', { 'ref' => 'bob' }, [] ] 
    ] ] 
  ] ]
</pre>

The engine understands various formats :

<pre class="brush: ruby">
  engine.launch('[ "participant", { "ref" : "alpha" }, [] ]')
    # JSON string

  engine.launch(Rufus::Json.decode('[ "participant", { "ref" : "alpha" }, [] ]'))
    # decoded JSON

  engine.launch([ "participant", { "ref" => "alpha" }, [] ])
    # Ruby raw process definition
</pre>




This raw representation of a process definition can also accomodate deep data structures like the Ruby DSL does.


h3. process definition generation

So we've seen nice "ruby process definition", but shouldn't we rather say "process definition generation via ruby" ?

<pre class="brush: ruby">
require 'ruote'

pdef = Ruote.process_definition do
  sequence do
    alpha
    bravo
  end
end

p pdef
  # =>
  # ["define", {}, [
  #   ["sequence", {}, [["alpha", {}, []], ["bravo", {}, []]]]]]
</pre>

The class method "process_definition" is used to generate a process definiton (a tree of expressions).

Maybe this piece of Ruby code makes the "generation" aspect more visible :

<pre class="brush: ruby">
pdef = Ruote.process_definition do
  sequence do
    %w[ alpha bravo charly doug ].each do |pa|
      participant :ref => pa
    end
  end
end

p pdef
  # =>
  # ["define", {}, [
  #   ["sequence", {}, [
  #     ["participant", {"ref"=>"alpha"}, []],
  #     ["participant", {"ref"=>"bravo"}, []],
  #     ["participant", {"ref"=>"charly"}, []],
  #     ["participant", {"ref"=>"doug"}, []]]]]]
</pre>


h3. see also

* "process testing":process_testing.html - testing process definitions

