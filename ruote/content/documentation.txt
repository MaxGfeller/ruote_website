---
title: documentation
filter:
  - erb
  - textile
---

h2. documentation

bits and pieces of documentation.


h3. quickstarts

* a "quickstart":quickstart.html with instructions on how to get ruote 2.1 and its dependencies
* "it's barley a task manager":http://jmettraux.wordpress.com/2010/01/29/barley/ in a "single file":http://github.com/jmettraux/ruote/blob/ruote2.1/examples/barley.rb sinatra webapp ("online demo":http://barley-plain.torstenschoenebaum.de/work)
* "ruote and decision tables":http://jmettraux.wordpress.com/2010/02/17/ruote-and-decision-tables/ explains how to integrate ruote and "decision tables":http://github.com/jmettraux/rufus-decision/, here is the "result":http://github.com/jmettraux/rufus-decision/blob/master/examples/reimbursement.rb

* not really a quickstart but "Torsten":http://github.com/tosch has pusblished an example of ruote in rails integration via ruote-kit, it's called "ruote on rails":http://github.com/tosch/ruote-on-rails (there is a "rails3 branch":http://github.com/tosch/ruote-on-rails/tree/rails3)


h3. basic documentation

* the "glossary":glossary.html enumerates concepts and terms used throughout ruote and attempts at giving explanations for them
* "process definitions":definitions.html describe the flow of work among participants
* "participants":participants.html are handed workitems by the engine to perform tasks with them
* there are various "participant implementations":part_implementations.html found in ruote itself and in its extensions, like ruote-couch and ruote-amqp
* "expressions":expressions.html are the building blocks of process definitions


h3. in-depth documentation

* the "dollar notation":dollar.html is a short name for variable/field extrapolation techniques in process definitions
* "common attributes":common_attributes.html can be used by any expression


h3. advanced documentation

* ruote "configuration":configuration.html, the engine, the workers and the storage[s]
* "implementing participants":implementing_participants.html
* ruote "rdoc":http://ruote.rubyforge.org/rdoc/ (raw ruby documentation)
* the "control flow patterns":patterns.html page details how ruote implements/approximates the control flow part of the "workflow patterns":http://workflowpatterns.com of Prof van der Aalst and Prof ter Hofstede and their research groups
* "process administration":process_administration.html or how to query, cancel or modify process instances
* "process testing":process_testing.html along with "participant testing":participant_testing.html


h3. presentations

* "presentations":presentations.html about ruote


h3. blog excerpts

a few links to blog posts about ruote.

* "ruote 2.1 released":http://jmettraux.wordpress.com/2009/12/31/ruote-2-1-released/ with an explanation about storage and workers
* "it's barley a task manager":http://jmettraux.wordpress.com/2010/01/29/barley/ in a "single file":http://github.com/jmettraux/ruote/blob/ruote2.1/examples/barley.rb sinatra webapp ("online demo":http://barley-plain.torstenschoenebaum.de/work)
* "how does ruote work ?":http://jmettraux.wordpress.com/2008/09/07/how-does-ruote-work/ (quite outdated but mostly OK)

h3. resources

* "selected resources":resources.html about workflow, BPM, Adaptive Case Management, ...

