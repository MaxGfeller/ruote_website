---
title: expressions
filter:
  - erb
  - textile
---

h2. flow expressions

Flow expressions are the building blocks of process definitions.


h3(#basic). basic expressions

* "cancel_process":exp/cancel_process.html - cancelling (aborting) a whole process instance
* "concurrence":exp/concurrence.html - parallel orchestration
* "concurrent_iterator":exp/concurrent_iterator.html - a bit like a parallel 'for'
* "cursor":exp/cursor.html - a sequence, but with rewind / jump / exit ...
* "loop/repeat":exp/cursor.html - a cursor, with an implicit rewind
* "define":exp/define.html - used to define a process or a subprocess
* "equals":exp/equals.html - comparing values (used with 'if')
* "if":exp/if.html - 'if' branching
* "iterator":exp/iterator.html - iterating over a list of value (a classic, sequential 'for')
* "noop":exp/noop.html - no-operation expression
* "participant":exp/participant.html - hands a workitem to a[n external] participant
* "sequence":exp/sequence.html - serial orchestration
* "set":exp/set.html - sets a process variable or a workitem field
* "subprocess":exp/subprocess.html - invokes (launches) a subprocess definition
* "wait":exp/wait.html - waits (sleeps) for a given amount of time


h3(#advanced). advanced expressions

* "add_branches":exp/add_branches.html - adds new branches to a running 'concurrent_iterator'
* "apply":exp/apply.html - used to leverage a segment of process passed to a subprocess (like block/yield in Ruby)
* "cancel":exp/undo.html - an alias for the 'undo' expression
* "cron":exp/cron.html - executes pieces of a process at given intervals
* "error":exp/error.html - forces the process instance into error
* "inc / dec":exp/inc.html - {inc|dec}rementing variables or fields (numbers or arrays)
* "listen":exp/listen.html - listen on a channel (a participant name) for incoming or outgoing events (workitems)
* "redo":exp/redo.html - redoes a tagged segment of process
* "reserve":exp/reserve.html - ensures a segment of process instance is traversed in isolation (not in parallel with other branches of the same instance)
* "restore":exp/restore.html - restores values from a previously saved workitem
* "save":exp/save.html - saves the current workitem
* "undo":exp/undo.html - undoes a tagged segment of process
* "when":exp/when.html - waits for a condition to become true before triggering


h3(#other). other expressions

Expressions used in debug time or that have become slightly obsolete

* "echo":exp/echo.html - echo some text to stdout (debug only)
* "forget":exp/equals.html - forgetting a segment of process (supplanted by the :forget attribute common to all expressions)


h3(#attributes). attributes common to all expressions

There is a set of "attributes common to all expressions":common_attributes.html, it includes :if, :unless, :timeout, :on_error, :on_cancel, :on_timeout and :forget


h3(#dollar). dollar notation : variable/fields extrapolation

The "dollar notation":dollar.html is used in expression attributes to enhance process definitions.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
participant :ref => '${field:author}'
  # the actual name of the participant is held in the workitem field 'author'
<% end -%>

