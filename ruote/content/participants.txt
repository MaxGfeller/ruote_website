---
title: participants
filter:
  - erb
  - textile
---

h2. participants

Participants are handed workitems by the ruote engine and are expected to perform a task with them. Usually, some piece of information found in the payload of the workitem defines what/which task should be performed.


h3. participants as abstractions

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  Ruote.process_definition :name => 'accident investigation case' do
    sequence do
      concurrence do
        participant 'reporter 1', :activity => 'gather info on accident site'
        participant 'reporter 2', :activity => 'gather info about customer'
      end
      participant 'hq', :activity => 'handle case'
    end
  end
<% end %>

In this process definition example, the 2 reporter participants are handed each a workitem by the engine and once their work got done, a merged single workitem continues in the flow and is presented to the 'hq' participant.

Note that no information about the actual details of the participants are leaking to the process definition. By reading the definition, the only clue we get is that participant replies are expected in order for the process run to be productive.

Nothing was specified about how workitems are to be dispatched to participants. Does it occur via SMTP ? Via a webhook ? Is the workitem placed in a database for consultation by the real participants ? Is the workitem printed and sent tied to a pigeon carrier ? The process definition yields no clue about that.


h3. registering participants

Process definitions are in most cases pointed at to the engine right at the launch time. The engine parses the definition and creates a process instance.

Participant implementations are usually bound in the engine when it is started. The term is to "register a participant in the engine". The engine is then equipped with a directory of participants that it looks up by name when a participant expression is applied, signifying that its workitem has to be despatched to a real participant.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  engine.register_participant 'reporter 1', Ruote::Dm::DmParticipant
<% end %>

Here, the participant named "reporter 1" is registered in the engine. We trust the engine with the actual instantiation and thus pass only the class : Ruote::Dm::DmParticipant (yes, it's a ruote-dm DataMapper participant, the workitem will be placed in a database)

In order to avoid writing too much code for binding participants, it's OK to leverage <strong>regular expressions</strong>. Here is something that can cope with 'reporter 1' and 'reporter 2' and many more :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  engine.register_participant /^reporter /, Ruote::Dm::DmParticipant
<% end %>

Don't worry about the participant implementation mixing the workitems,

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  concurrence do
    participant 'reporter 1', :activity => 'gather info on accident site'
    participant 'reporter 2', :activity => 'gather info about customer'
  end
<% end %>

in our example, the attribute 'participant' of the top workitem while be 'reporter 1' vs 'reporter 2' for the bottom one, though the same participant implementation consumed the workitem.


h3. to reply or not

TODO

In some cases, no task is expected and workitems are mere notifications.

Participants are usually expected to reply to the engine with an updated version of the workitem [payload].

h3. see also

* the "participant expression":exp/participant.html
* "participant implementations":part_implementations.html

