---
title: common attributes
filter:
  - erb
  - textile
---

h2. attributes common to all expressions

The attributes listed on this page may be used with any expression.

* ":timeout":#timeout
* ":if or :unless":#if_unless
* ":forget":#forget
* ":on_error":#on_error
* ":on_cancel":#on_cancel
* ":on_timeout":#on_timeout


h3(#timeout). :timeout

If after two days, the two reviewers couldn't do their work, the process instance will resume to the editor :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  sequence do
    participant :ref => 'author'
    sequence :timeout => '2d' do
      participant :ref => 'reviewer1'
      participant :ref => 'reviewer2'
    end
    participant :ref => 'editor'
  end
<% end %>

:timeout understands h, m, d, s (respectively hour, minute, day, second). It also understands y, M, w (for year, Month and week), but they are rarely used.

It's OK to give an absolute date to the :timeout attribute :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  participant :ref => 'author', :timeout => 'Sun Jan 24 17:28:28 +0900 2010'
<% end %>

But most of the time absolute dates are fetched from process variables or workitem fields :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  participant :ref => 'author', :timeout => '${f:time_limit}'
<% end %>

Please note that "participants":exp/participant.html may have their say in their timeout.

You might also have a look at the ":on_timeout":#on_timeout attribute.


h3(#if_unless). :if / :unless

These two attributes accept a condition string. If the condition evaluates to true (or false for :unless), the expression will get executed, else not.

The CEO will receive a workitem / task only if the budget (stored in a workitem field) exceeds 23000 :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  concurrence do
    participant 'ceo', :if => '${f:budget} > 23000'
    participant 'cfo'
    participant '${f:bu_head}'
  end
<% end %>

Any expression may use :if / :unless :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  cursor do
    subprocess 'gather_data'
    subprocess 'generate_graphs'
    participant 'quality_control'
    rewind :unless => '${f:sufficient_data}'
    subprocess 'generate_pdfs'
    # over
  end
<% end %>

Really any :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  sequence do
    sequence :if => '${f:weather} == rainy' do
      rent_tent
      rent_heating_system
    end
    concurrence do
      sequence do
        emit_invitations
        gather_responses :timeout => '3w'
      end
      cursor :if => '${f:orchestra}' do
        gather_orchestra
        decide_about_orchestra
        reserve_orchestra
        rewind :if => '${f:orchestra_already_taken}'
      end
      participant 'mayor', :task => 'notification'
    end
  end
<% end %>


h3(#forget). :forget

An expression flagged with :forget => true or :forget => 'true' gets forgotten, it is considered has having replied immediately to its parent expression, though its 'execution' is resuming independently.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  concurrence do
    participant 'alfred'
    participant 'bob'
    participant 'charly', :forget => true
  end
<% end %>

Charly will receive a workitem, but the concurrence will receive a reply immediately, thus, the concurrence (and the rest of the process) will resume as soon as both Alfred and Bob have replied.

It can be used for some kind of rough fire and forget concurrency :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  sequence do
    participant 'alfred', :forget => true
    participant 'bob', :forget => true
    participant 'charly', :forget => true
  end
<% end %>


h3(#on_error). :on_error

By default, any error in a process instance gets logged and the segment of process where it occurred is stalled. It's then possible to replay_at_error() the issue.

What if you want to specify the "on error" behaviour directly in the process definition ?

:on_error is the closest thing to the begin/rescue, try/catch found in regular programming languages.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
Ruote.process_definition :name => 'x' do

  sequence :on_error => 'handle_issue' do
    participant 'alpha'
    cursor do
      # ...
    end
  end

  define 'handle_issue' do
    participant 'supervisor', :msg => 'process ${wfid} has gone ballistic'
  end
end
<% end %>

If there is an error (at any level/depth) inside of our sequence, the whole branch starting

:on_error must point to a subprocess or a participant.

If :redo or 'redo' is given, the process branch will get cancelled and retried :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  sequence :on_error => :redo do
    # ...
  end
<% end %>

If :undo or 'undo' is passed, the branch will get cancelled and the flow will resume :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  sequence do
    participant 'notify_bu', :on_error => :undo
      # we don't care if the notification fails
    participant 'bu_head'
      # business as usual
  end
<% end %>

NOTE : there are plans for making the "listen":exp/listen.html expression listen to errors, stay tuned.


h3(#on_cancel). :on_cancel

TODO


h3(#on_timeout). :on_timeout

TODO


h3(#tag). :tag

TODO

