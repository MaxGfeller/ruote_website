---
title: workflow control patterns
filter:
  - erb
  - textile
---

h2. workflow control patterns

The "Workflow Patterns":http://workflowpatterns.com/patterns/control/index.php are a catalog of various building blocks for workflow execution.

Described here are ways to implement each of those patterns with ruote. Some of them are not directly realizable with ruote, approximations are proposed.

Each pattern is illustrated with a Ruby DSL implementation (or approximation). XML implementations are easily derivable from their Ruby counterparts. There is also a link to the original pattern explanation and its flash animation.

Participant expressions have been supplemented with an :activity attribute to give a better feel about an hypothetical context for the application of the pattern.

*(#top) "Basic Control Flow Patterns":#basic
** "sequence":#ba_sequence
** "parallel split":#ba_parallel_split
** "synchronization":#ba_synchronization
** "exclusive choice":#ba_exclusive_choice
** "simple merge":#ba_simple_merge

* "Advanced Branching and Synchronization Patterns":#advanced
* "Structural Patterns":#structural
* "Multiple Instance Patterns":#multiple
* "State-based Patterns":#state
* "Cancellation Patterns":#cancellation
* "New Control Flow Patterns":#new

<hr/>


h2(#basic). Basic Control Flow Patterns

<!-- ----------------------------------------------------------------------- -->

h3(#ba_sequence). sequence

Chaining activities in sequence. Uses the "sequence":exp/sequence.html expression. The "cursor":exp/cursor.html expression might also be used.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  sequence do
    participant :ref => 'alpha', :activity => 'write'
    participant :ref => 'bravo', :activity => 'fix typos'
  end
<% end %>

"original pattern explanation":http://workflowpatterns.com/patterns/control/basic/wcp1.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

h3(#ba_parallel_split). parallel split

The "concurrence":exp/concurrence.html expression is the main tool for 'parallel splits'.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  concurrence do
    participant :ref => 'alpha', :activity => 'write introduction'
    participant :ref => 'bravo', :activity => 'write postface'
  end
<% end %>

"original pattern explanation":http://workflowpatterns.com/patterns/control/basic/wcp2.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

h3(#ba_synchronization). synchronization

Synchronization is "supported implicitely":#ba_parallel_split by the "concurrence":exp/concurrence.html expression. Note that this expression can be tuned via its attributes for behaviours different than the vanilla "wait before all child expressions have replied" one.

"original pattern explanation":http://workflowpatterns.com/patterns/control/basic/wcp3.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

h3(#ba_exclusive_choice). exclusive choice

Exclusive 'routing' within the process : the flow will go one way or the other, but not both.

The "if":exp/if.html is usually in charge when implementing this pattern (the underscore '_' prefixing the if prevents collision with the 'if' Ruby keyword).

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  _if '${f:decision} == accepted' do
    participant :ref => 'alpha', :activity => 'request further info'
    participant :ref => 'alpha', :activity => 'send refusal note'
  end
<% end %>

(this if example forwards the flow to the same 'alpha' participant, but with different activities).

One could rewrite this as :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  sequence do
    participant 'alpha', :activity => 'request further info', :if => '${f:decision} == accepted'
    participant 'alpha', :activity => 'send refusal note', :if => '${f:decision} == refused'
  end
<% end %>

But this is not strictly equivalent

With a bit of imagination, exclusive choices may be found beyond ifs :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  Ruote.process_definition :name => 'request processing' do

    sequence do
      # ... 
      participant :ref => 'editor' # decision : accepted or refused
      subprocess :ref => 'request_${f:decision}'
      # ...
    end

    define 'request_accepted' do
      participant :ref => 'alpha', :activity => 'request further info'
    end

    define 'request_refused' do
      participant :ref => 'alpha', :activity => 'send refusal note'
    end
  end
<% end %>

The name of the "subprocess":exp/subprocess.html is extrapolated at runtime and the flow is routed accordingly.

"original pattern explanation":http://workflowpatterns.com/patterns/control/basic/wcp4.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

h3(#ba_simple_merge). simple merge

<!-- ----------------------------------------------------------------------- -->

<hr/>


h2(#advanced). Advanced Branching and Synchronization Patterns


<hr/>


h2(#structural). Structural Patterns


<hr/>


h2(#multiple). Multiple Instance Patterns


<hr/>


h2(#state). State-based Patterns


<hr/>


h2(#cancellation). Cancellation Patterns


<hr/>


h2(#new). New Control Flow Patterns

