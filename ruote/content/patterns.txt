---
title: workflow control patterns
filter:
  - erb
  - textile
---

h2. workflow control patterns

The "Workflow Patterns":http://workflowpatterns.com/patterns/control/index.php are a catalog of various building blocks for workflow execution.

Described here are ways to implement each of those patterns with ruote. Some of them are not directly realizable with ruote, approximations are proposed. This is a self-evaluation, for an authoritative voice, the workflow patterns website and its "mailing list":http://groups.google.com/group/workflow-patterns are here.

Each pattern is illustrated with a Ruby DSL implementation (or approximation). XML implementations are easily derivable from their Ruby counterparts. There is also a link to the original pattern explanation and its flash animation.

Participant expressions have been supplemented with an :activity attribute to give a better feel about an hypothetical context for the application of the pattern.

*(#top) "Basic Control Flow Patterns":#basic
** "sequence":#ba_sequence
** "parallel split":#ba_parallel_split
** "synchronization":#ba_synchronization
** "exclusive choice":#ba_exclusive_choice
** "simple merge":#ba_simple_merge

* "Advanced Branching and Synchronization Patterns":#advanced
** "multi choice":#ad_multi_choice
** "structured synchronizing merge":#ad_structured_synchronizing_merge
** "multi merge":#ad_multi_merge
** "structured discriminator":#ad_structured_discriminator

* "Structural Patterns":#structural
** "arbitrary cycles":#st_arbitrary_cycles
** "implicit termination":#st_implicit_termination

* "Multiple Instance Patterns":#multiple
** "multiple instances without synchronization":#mu_multiple_instances_without_synchronization
** "multiple instances with a priori design time knowledge":#mu_multiple_instances_with_a_priori_design_time_knowledge
** "multiple instances with a priori run time knowledge":#mu_multiple_instances_with_a_priori_run_time_knowledge
** "multiple instances without a priori run time knowledge":#mu_multiple_instances_without_a_priori_run_time_knowledge

* "State-based Patterns":#state
** "deferred choice":#sa_deferred_choice
** "interleaved parallel routing":#sa_interleaved_parallel_routing
** "milestone":#sa_milestone

* "Cancellation Patterns":#cancellation
** "cancel task":#ca_cancel_task
** "cancel case":#ca_cancel_case

* "New Control Flow Patterns":#new
** coming soon

<hr/>


h2(#basic). Basic Control Flow Patterns

<!-- ----------------------------------------------------------------------- -->

h3(#ba_sequence). sequence

Chaining activities in sequence. Uses the "sequence":exp/sequence.html expression. The "cursor":exp/cursor.html expression might also be used.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  sequence do
    participant :ref => 'alpha', :activity => 'write'
    participant :ref => 'bravo', :activity => 'fix typos'
  end
<% end %>

"original pattern explanation":http://workflowpatterns.com/patterns/control/basic/wcp1.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

h3(#ba_parallel_split). parallel split

The "concurrence":exp/concurrence.html expression is the main tool for 'parallel splits'.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  concurrence do
    participant :ref => 'alpha', :activity => 'write introduction'
    participant :ref => 'bravo', :activity => 'write postface'
  end
<% end %>

"original pattern explanation":http://workflowpatterns.com/patterns/control/basic/wcp2.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

h3(#ba_synchronization). synchronization

Synchronization is "supported implicitely":#ba_parallel_split by the "concurrence":exp/concurrence.html expression. Note that this expression can be tuned via its attributes for behaviours different than the vanilla "wait before all child expressions have replied" one.

"original pattern explanation":http://workflowpatterns.com/patterns/control/basic/wcp3.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

h3(#ba_exclusive_choice). exclusive choice

Exclusive 'routing' within the process : the flow will go one way or the other, but not both.

The "if":exp/if.html is usually in charge when implementing this pattern (the underscore '_' prefixing the if prevents collision with the 'if' Ruby keyword).

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  _if '${f:decision} == accepted' do
    participant :ref => 'alpha', :activity => 'request further info'
    participant :ref => 'alpha', :activity => 'send refusal note'
  end
<% end %>

(this if example forwards the flow to the same 'alpha' participant, but with different activities).

One could rewrite this as :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  sequence do
    participant 'alpha', :activity => 'request further info', :if => '${f:decision} == accepted'
    participant 'alpha', :activity => 'send refusal note', :if => '${f:decision} == refused'
  end
<% end %>

But this is not strictly equivalent

With a bit of imagination, exclusive choices may be found beyond ifs :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  Ruote.process_definition :name => 'request processing' do

    sequence do
      # ... 
      participant :ref => 'editor' # decision : accepted or refused
      subprocess :ref => 'request_${f:decision}'
      # ...
    end

    define 'request_accepted' do
      participant :ref => 'alpha', :activity => 'request further info'
    end

    define 'request_refused' do
      participant :ref => 'alpha', :activity => 'send refusal note'
    end
  end
<% end %>

The name of the "subprocess":exp/subprocess.html is extrapolated at runtime and the flow is routed accordingly.

"original pattern explanation":http://workflowpatterns.com/patterns/control/basic/wcp4.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

h3(#ba_simple_merge). simple merge

A simple merge occur when two (or more) exclusive branch converge. As seen in "exclusive choice":#ba_exclusive_choice this pattern is implicitely supported. It simply occurs when the 'then' or the 'else' clause of an 'if' terminates and the flow resumes.

"original pattern explanation":http://workflowpatterns.com/patterns/control/basic/wcp5.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

<hr/>


h2(#advanced). Advanced Branching and Synchronization Patterns

h3(#ad_multi_choice). multi choice

Combining the "concurrence":exp/concurrence.html expression and :if attributes makes for an easy implementation of this pattern :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  concurrence do
    participant 'regular service', :if => '${f:price} < 50'
    participant 'premium service', :if => '${f:price} > 40'
    participant 'extra service', :if => '${f:extra_ordered}'
  end
<% end -%>

In this example, if the price is between 40 and 50, regular service and premium service are triggered, extra could be triggerd as well if the field 'extra_ordered' has the value 'true'.

"original pattern explanation":http://workflowpatterns.com/patterns/control/advanced_branching/wcp6.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

h3(#ad_structured_synchronizing_merge). structured synchronizing merge

The "multi choice":#ad_multi_choice pattern implementation implicitely support this 'structured synchronizing merge'. The "concurrence":exp/concurrence.html expression waits for all its children expression to reply before resuming the flow.

"original pattern explanation":http://workflowpatterns.com/patterns/control/advanced_branching/wcp7.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

h3(#ad_multi_merge). multi merge

<em>The convergence of two or more branches into a single subsequent branch such that each enablement of an incoming branch results in the thread of control being passed to the subsequent branch.</em>

The flash animation for this pattern is worth a "look":http://workflowpatterns.com/patterns/control/advanced_branching/wcp8_animation.php.

Basically, what comes after the multi-merge will be executed once for each incoming replies.

Certainly, ruote doesn't support that out of the box, but there are approximations to it :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  Ruote.process_definition :name => 'multi merge' do

    concurrence do
      sequence do
        team_a
        after
      end
      sequence do
        team_b
        after
      end
      sequence :if => '${f:more_capacity_needed}' do
        extra_team
        after
      end
    end

    define 'after' do
      participant 'supervisor', :activity => 'assess work'
    end
  end
<% end -%>

Here, a subprocess ("define":exp/define.html 'after') is used after each concurrent branch. Before replying to its parent (the concurrence), each branch calls it. (team_a, team_b and extra_team could be participant or subprocess names).

Leveraging the "listen":exp/listen.html expression is another option :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  Ruote.process_definition :name => 'multi merge' do

    concurrence :count => 3, :remaining => :forget do

      team_a
      team_b
      team_extra :if => '${f:more_capacity_needed}'

      listen :to => /^team\_.+/, :upon => :reply do
        participant 'supervisor', :activity => 'assess work'
      end
    end
  end
<% end -%>

With this process definition, each time a team participant replies, the participant 'supervisor' is sent a workitem. Please note that this works only with participants. In the above subprocess example, 'team_a' could point either to a participant, either to a subprocess.

"original pattern explanation":http://workflowpatterns.com/patterns/control/advanced_branching/wcp8.php | "top":#top

<!-- ----------------------------------------------------------------------- -->

h3(#ad_structured_discriminator). structured discriminator

As soon as one of two concurrent branches replies, the flow resumes and the other branch is 'forgotten' (continues its execution without the parent process caring for its outcome).

<% coderay(:lang => 'ruby', :line_numbers => "inline") do -%>
  sequence do
    concurrence :count => 1, :remaining => :forget do
      test_batch_a
      test_batch_b
    end
    final_test_batch
  end
<% end -%>

As soon as an initial test batch is completed, the final test batch is triggered. The remaining test batch continues, unhindered (but forgotten).

The attributes :count and :remaining of the "concurrence":exp/concurrence.html are used.

"original pattern explanation":http://workflowpatterns.com/patterns/control/advanced_branching/wcp9.php | "top":#top

<!-- ----------------------------------------------------------------------- -->


<hr/>


h2(#structural). Structural Patterns


<hr/>


h2(#multiple). Multiple Instance Patterns


<hr/>


h2(#state). State-based Patterns


<hr/>


h2(#cancellation). Cancellation Patterns


<hr/>


h2(#new). New Control Flow Patterns

coming soon.

