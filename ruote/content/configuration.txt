---
title: configuration
filter:
  - erb
  - textile
---

h2. configuration

Before evoking configuration it's perhaps a good idea to have a look at the "post announcing ruote 2.1":http://jmettraux.wordpress.com/2009/12/31/ruote-2-1-released/, it's detailing the design decisions behind ruote 2.1. It helps understand the 3 objects detailed in this page, "engine":#engine, "worker":#worker and "storage":#storage.

In ruote 2.1, the engine _class_ became shallow, just a few methods that insert launch and reply orders in the storage and read it when querying for process statuses.

The _real_ engine is composed of a storage (persistent core) and of one or more workers.

Storage implementations are meant to be process/thread safe, ie they can be used by multiple worker processes and engines.

The engine _class_ is nothing more than a dashboard, with indicators and a few knobs.

This is the ruote configuration you can see in the "entry page":index.html of this documentation :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
require 'ruote'
require 'ruote/storage/fs_storage'

engine = Ruote::Engine.new(Ruote::Worker.new(Ruote::FsStorage.new('work')))
<% end %>

This is a super-vanilla configuration. Packaging the engine, a worker, and the storage together.

Using "ruote-dm":http://github.com/jmettraux/ruote-dm "DataMapper":http://datamapper.org/ persistence, an engine/worker initalization would look like :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
require 'ruote'
require 'ruote/dm/storage'

engine = Ruote::Engine.new(
  Ruote::Worker.new(
    Ruote::Dm::DmStorage.new(:default)))
<% end %>

Where :default simply indicates, we'll want to work with the default configured DataMapper repository.

***

h3(#engine). engine

Engine options are in fact passed to the storage at initialization time.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
require 'ruote'
require 'ruote/storage/fs_storage'

engine = Ruote::Engine.new(
  Ruote::Worker.new(
    Ruote::FsStorage.new(
      'work',
      'remote_definition_allowed' => true, 'ruby_eval_allowed' => true)))
<% end %>

They can also be set directly in the storage (document type 'configurations', key 'engine'), but that's an advanced technique (and you don't want/need to change it at runtime).

Some people might prefer writing :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
engine = Ruote::Engine.new(
  Ruote::Worker.new(
    Ruote::FsStorage.new('work')))

engine.configure('ruby_definition_allowed', true)
engine.configure('ruby_eval_allowed', true)
<% end %>

h4(#engine_options). options

* *remote_definition_allowed* :

remote definitions are process definitions reachable via HTTP. Since process definition are 'code', ruote, by default, prevents you from doing things like

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  Ruote.process_definition :name => 'main process' do
    sequence do
      subprocess 'http://example.com/definitions/head_process.rb'
      subprocess 'http://example.com/definitions/tail_process.rb'
    end
  end

# or

  engine.variables['head'] = 'http://example.com/definitions/head_process.rb'
  engine.variables['tail'] = 'http://example.com/definitions/tail_process.rb'

  Ruote.process_definition :name => 'main process' do
    sequence do
      head
      tail
    end
  end

# or simply

  engine.launch('http://example.com/definitions/main.xml')

<% end %>

You have to explicitely set 'remote_definition_allowed' to true.


* *ruby_eval_allowed* :

more about this option in the page about the "dollar notation":dollar.html#ruby_eval_allowed.


***

h3(#worker). worker

TODO

***

h3(#storage). storage

Workflows / business processes usually involve real persons, humans. They are slower than computers. These days processes also imply multiple systems / services. These two things imply that workflows / processes may last a long time. Persistence is necessary, this is done with the storage.

Since workers share the storage, it has not only to provide reliable persistence but also helpers to avoid worker collisions.

The following table summarizes the various storage implementations.

*multiple workers* tells if yes or no the storage supports multiple workers;
*remote worker* indicates if workers not on the same host as the storage are possible;
*speed* is a relative indication of the speed of the storage.

|_.storage|_.multiple workers ?|_.remote worker ?|_.speed|_. |
|"Ruote::HashStorage":#hash_storage          | no (1) | no | best | in-memory storage, limited to the current ruby process, totally transient|
|"Ruote::FsStorage":#fs_storage              | yes (2) | no | 1st | hierarchy of JSON files, uses file locks to prevent collisions when multiple workers|
|"Ruote::Dm::DmStorage":#dm_storage          | yes | yes | 4th | "DataMapper":http://datamapper.org based persistence|
|"Ruote::Couch::CouchStorage":#couch_storage | yes | yes | slowest | "Apache CouchDB":http://couchdb.apache.org/ based persistence, remote, very slow|
|"Ruote::Redis::RedisStorage":#redis_storage | yes | yes | 2nd | "Redis":http://code.google.com/p/redis/ based persistence, fast and remote. Limited in max size|
|"Ruote::MongoDBStorage":#mongo_storage | no (3) | yes | like redis | "MongoDB":http://www.mongodb.org based persistence|
|"Ruote::Beanstalk::BsStorage":#beanstalk_storage | yes | yes | 3rd | FsStorage based persistence with a "Beanstalk":http://kr.github.com/beanstalkd/ front, fast and remote|

(1) well, it's 'yes' but there isn't much to gain from one more worker in the same Ruby runtime
(2) multiple workers, but not on Windows
(3) (has to be confirmed)

h4(#hash_storage). Ruote::HashStorage

"source":http://github.com/jmettraux/ruote/blob/ruote2.1/lib/ruote/storage/hash_storage.rb

h4(#fs_storage). Ruote::FsStorage

"source":http://github.com/jmettraux/ruote/blob/ruote2.1/lib/ruote/storage/fs_storage.rb

h4(#dm_storage). Ruote::Dm::DmStorage

"source":http://github.com/jmettraux/ruote-dm/blob/ruote2.1/lib/ruote/dm/storage.rb

h4(#couch_storage). Ruote::Couch::CouchStorage

"source":http://github.com/jmettraux/ruote-couch/tree/ruote2.1/lib/ruote/couch/

h4(#redis_storage). Ruote::Redis::RedisStorage

"source":http://github.com/jmettraux/ruote-redis/blob/master/lib/ruote/redis/storage.rb

h4(#mongo_storage). Ruote::MongoDBStorage

"source":https://github.com/PlasticLizard/ruote-mongodb/blob/master/lib/ruote-mongodb/mongodb_storage.rb

h4(#beanstalk_storage). Ruote::Beanstalk::BsStorage

"source":http://github.com/jmettraux/ruote-beanstalk/blob/ruote2.1/lib/ruote/beanstalk/storage.rb

h4(#composite_storage). composite storage

"source":http://github.com/jmettraux/ruote/blob/ruote2.1/lib/ruote/storage/composite_storage.rb

The "composite" storage lets you select which storage to use for which category of object to be persisted. Here is a table detailing those 'categories' :

|_.type         |_.description|
|expressions    |the atomic pieces of process instance|
|msgs           |'messages' to apply/reply to expressions|
|schedules      |msgs scheduled for later processing|
|errors         |errors that occured during process execution (msgs processing)|
|variables      |engine (global) variables|
|configurations |engine configurations|
|workitems      |"StorageParticipant":part/storage_participant.html workitems|

An example where everything is handled by a FsStorage while the 'msgs' are stored in a HashStorage :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  opts = {
    'remote_definition_allowed' => true,
    'ruby_eval_allowed' => true
  }

  engine =
    Ruote::Engine.new(
      Ruote::Worker.new(
        Ruote::CompositeStorage.new(
          Ruote::FsStorage.new('ruote_work', opts),
          'msgs' => Ruote::HashStorage.new(opts))))
<% end %>

