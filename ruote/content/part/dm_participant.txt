---
title: dm_participant 
filter:
  - erb
  - textile
---

h2. dm_participant


Wrapping a ruote Workitem for inserstion in a DataMapper repository.


This participant will store ruote workitems into a DataMapper repository.

Two initialization options are recognized : :dm_repository, the name of a
DataMapper configured repository (defaults to :default) and :store_name,
an optional store_name to differentiate workitems stored by this participant
from other workitems stored by other participants in the same DataMapper
repository.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  alice = engine.register_participant(
    'alice',
    Ruote::Dm::DmParticipant.new(
      :store_name => 'engineers',
      :dm_repository => 'whateversql'))
<% end %>

or simply

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  alice = engine.register_participant('bob', Ruote::Dm::DmParticipant)
<% end %>

h3. :key_field

The DmParticipant understands a :key_field option when
initialized/registered.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  alice = engine.register_participant(
    :alice, Ruote::Dm::DmParticipant, :key_field => 'brand')
<% end %>

This alice participant will place the value in the workitem field named
'brand' in the key_field column of the Ruote::Dm::DmWorkitem.

This key_field column is indexed and should thus be efficiently queried.

Note that :key_field can leverage composite values.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  bob = engine.register_participant(
    :bob, Ruote::Dm::DmParticipant, :key_field => '${brand} ${year}')
<% end %>

For bob, the key_field column will hold a concatenation of the workitem
field 'brand', a space and the workitem field 'year'.

This technique may also be used to look deeper into workitems :

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  charly = engine.register_participant(
    :charly, Ruote::Dm::DmParticipant, :key_field => '${car.brand}')
<% end %>

For a workitem whose payload look like

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  { 'car' => { 'brand' => 'toyota', :type => 'prius' }, 'dossier' => 3423 }
<% end %>

You can also use that trick to do things like

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  doug = engine.register_participant(
    :doug, Ruote::Dm::DmParticipant, :key_field => 'brand::${brand}')
  elsa = engine.register_participant(
    :elsa, Ruote::Dm::DmParticipant, :key_field => 'rank::${rank}')
<% end %>

That adds a bit more of info to the key_field value, even if there's only
one workitem field involved.


h3. :dm_workitem_class

Perhaps not the best option to change !

By default, DmParticipant uses Ruote::Dm::DmWorkitem
(a DataMapper::Resource extending class) to store workitems.

Provided this other class as a class method .from_ruote_workitem(wi), and
replies to #all, #first and .autoupgrade! as a DataMapper::Resource does,
it's OK to set another class.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  fred = engine.register_participant(
    'fred',
    Ruote::Dm::DmParticipant,
    :dm_workitem_class => MyRuote::DmWorkitem)
<% end %>

Use at your own risk !


h3. Ruote::Dm::DmWorkitem.auto_upgrade!

You might want to run

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  Ruote::Dm::DmWorkitem.auto_upgrade!
<% end %>

before registering any DmParticipant in the engine, in order to prepare
the database table.

<% coderay(:lang => 'ruby', :line_numbers => 'inline') do -%>
  DataMapper.repository(:my_repository) do
    Ruote::Dm::DmWorkitem.auto_upgrade!
  end
<% end %>
